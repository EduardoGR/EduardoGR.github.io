{"version":3,"sources":["reducers/github.js","resources/index.js","components/App.js","serviceWorker.js","index.js"],"names":["initialState","projects","useStyles","makeStyles","theme","root","display","margin","spacing","small","width","height","large","injectSheet","classes","moreClasses","className","app","appHeader","main","Avatar","src","alt","Boolean","window","location","hostname","match","store","createStore","currentState","action","type","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNACMA,EAAe,CACnBC,SAAU,I,mCCDL,MC4CDC,EAAYC,YAAYC,IAAD,CAC3BC,KAAM,CACJC,QAAS,OACT,QAAS,CACPC,OAAQH,EAAMI,QAAQ,KAG1BC,MAAO,CACLC,MAAON,EAAMI,QAAQ,GACrBG,OAAQP,EAAMI,QAAQ,IAExBI,MAAO,CACLF,MAAON,EAAMI,QAAQ,IACrBG,OAAQP,EAAMI,QAAQ,QAuBXK,UAzEI,CACf,IAAO,CACH,UAAa,UAGjB,QAAW,CACT,OAAU,SACV,cAAiB,QAGnB,UAAa,CACT,gBAAmB,UACnB,UAAa,MACb,QAAW,OACX,cAAiB,SACjB,WAAc,SACd,eAAkB,SAClB,SAAY,qBACZ,MAAS,SAGb,KAAQ,CACN,gBAAmB,UACnB,UAAa,OACb,QAAW,OACX,cAAiB,SACjB,WAAc,SACd,eAAkB,SAClB,SAAY,qBACZ,MAAS,WAGX,QAAW,CACP,MAAS,YAwCFA,CAnBH,EACRC,cAEF,MAAMC,EAAcb,IAEpB,OACI,yBAAKc,UAAWF,EAAQG,KACtB,4BAAQD,UAAWF,EAAQI,YAE3B,yBAAKF,UAAWF,EAAQK,MACtB,kBAACC,EAAA,EAAD,CAAQC,IDvEW,wGCuESL,UAAWD,EAAYH,MAAOU,IAAI,YAC9D,qEC7DUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVN,IAAMC,EAAQC,aJHe,WAA+C,IAA9CC,EAA6C,uDAA9B9B,EAAc+B,EAAgB,uDAAP,GAG1D,OAFAA,EAAOC,KAEAF,IIEbN,OAAOS,8BAAgCT,OAAOS,gCAGlDC,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OAEJQ,SAASC,eAAe,SDkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.11e4df39.chunk.js","sourcesContent":["\nconst initialState = {\n  projects: [],\n};\n\nexport const githubReducer = (currentState = initialState, action = {}) => {\n  switch (action.type) {\n      default:\n          return currentState\n  }\n}\n","\nexport const profileAvatar = \"https://avatars0.githubusercontent.com/u/8736983?s=460&u=a15e0743590063392e16e68abaa3c06d00f066d9&v=4\"\n","import React from 'react';\nimport injectSheet from 'react-jss'\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport { profileAvatar } from '../resources'\n\nconst stylesheet = {    \n    'app': {\n        'textAlign': 'center',\n    },\n\n    'appLogo': {\n      'height': '40vmin',\n      'pointerEvents': 'none'\n    },\n\n    'appHeader': {\n        'backgroundColor': '#ffecba',\n        'minHeight': '5vh',\n        'display': 'flex',\n        'flexDirection': 'column',\n        'alignItems': 'center',\n        'justifyContent': 'center',\n        'fontSize': 'calc(10px + 2vmin)',\n        'color': 'white'\n    },\n\n    'main': {\n      'backgroundColor': '#ffecba',\n      'minHeight': '95vh',\n      'display': 'flex',\n      'flexDirection': 'column',\n      'alignItems': 'center',\n      'justifyContent': 'center',\n      'fontSize': 'calc(10px + 2vmin)',\n      'color': '#b35718'\n    },\n\n    'appLink': {\n        'color': '#61dafb'\n    }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  },\n  large: {\n    width: theme.spacing(45),\n    height: theme.spacing(45),\n  },\n}));\n\nconst App = ({\n    classes,\n}) => {\n  const moreClasses = useStyles();\n\n  return (\n      <div className={classes.app}>\n        <header className={classes.appHeader}>\n        </header>\n        <div className={classes.main}>\n          <Avatar src={profileAvatar} className={moreClasses.large} alt=\"profile\" />\n          <p>\n            Hi! This will be my web page soon!\n          </p>\n        </div>\n      </div>\n    );\n};\n\nexport default injectSheet(stylesheet)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport { githubReducer} from './reducers/github';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(\n    githubReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}